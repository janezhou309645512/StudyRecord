1.springboot创建web项目
https://github.com/WinterChenS/my-site
https://github.com/WinterChenS/springboot2-mybatis-demo
https://blog.csdn.net/gebitan505/article/details/54929287


2.目录结构
src/main/java：目录下放置所有java文件（源代码文件）；

src/main/resources：放置所有的配置文件、页面文件、静态资源文件；

src/main/resources/static：是静态资源文件目录，在这个目录中的所有文件将可以被直接访问，如果没有这个文件夹可自行创建；

src/main/resources/public：作用和src/main/resources/static目录一样。


注意：每创建一个新项目都要重新配置maven,以及编码格式

2.注解
1）Action：
类中
@Congtroller
@RequestMapping(value = "/user")


方法：
@ResponseBody 返回json
@PostMapping("/add") post请求
接受传过来的值：在方法里的参数里

2）Service 
@Service(value = "userService")

3)Dao层
a.在application哪里引入扫描@MapperScan("com.example.mybatisdemo.dao")
b.接口：UserMapper：配置数据库操作


        @Select 是查询类的注解，所有的查询均使用这个
        @Result 修饰返回的结果集，关联实体类属性和数据库字段一一对应，如果实体类属性和数据库属性名保持一致，就不需要这个属性来修饰。
        @Insert 插入数据库使用，直接传入实体类会自动解析属性到对应的值
        @Update 负责修改，也可以直接传入对象
        @delete 负责删除
	例如：
	public interface UserMapper {

    @Select("SELECT * FROM users")
    @Results({
        @Result(property = "userSex",  column = "user_sex", javaType = UserSexEnum.class),
        @Result(property = "nickName", column = "nick_name")
    })
    List<UserEntity> getAll();

    @Select("SELECT * FROM users WHERE id = #{id}")
    @Results({
        @Result(property = "userSex",  column = "user_sex", javaType = UserSexEnum.class),
        @Result(property = "nickName", column = "nick_name")
    })
    UserEntity getOne(Long id);

    @Insert("INSERT INTO users(userName,passWord,user_sex) VALUES(#{userName}, #{passWord}, #{userSex})")
    void insert(UserEntity user);

    @Update("UPDATE users SET userName=#{userName},nick_name=#{nickName} WHERE id =#{id}")
    void update(UserEntity user);

    @Delete("DELETE FROM users WHERE id =#{id}")
    void delete(Long id);

}


c.引用：@Autowired

4)用bean引用
 @Autowired
 
 






